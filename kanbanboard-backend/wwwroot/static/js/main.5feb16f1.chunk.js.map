{"version":3,"sources":["Components/EditNewCardDialog.jsx","Components/TaskCard.jsx","Components/KanbanLane.jsx","network/HttpCommunication.js","Components/NewLaneDialog.jsx","Components/KanbanBoard.jsx","Components/App.jsx","index.jsx"],"names":["EditNewCardDialog","props","titleProp","title","mode","descriptionProp","description","deadlineProp","deadline","onSaveCard","editMode","React","setTitle","setDescription","Date","toLocaleDateString","date","setDate","open","setOpen","openSnackBar","setOpenSnackBar","handleClickOpen","handleClose","handleCloseSnackBar","IconButton","color","size","onClick","fontSize","Button","variant","sx","width","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","required","margin","id","label","type","fullWidth","onChange","event","target","value","defaultValue","multiline","rows","DialogActions","Snackbar","autoHideDuration","anchorOrigin","horizontal","vertical","Alert","severity","TaskCard","laneId","onRemoveCard","onEditCard","Card","padding","maxWidth","ListItemText","primary","Grid","container","spacing","style","whiteSpace","overflowWrap","item","xs","cardDetails","secondary","Typography","display","component","wordWrap","weekday","year","month","day","trim","defaultProps","KanbanLane","Object","assign","i","this","cards","laneID","deletedCardId","editedCard","oreder","sort","a","b","order","cardsRender","map","card","index","draggableId","toString","provided","ListItem","alignitems","draggableProps","dragHandleProps","ref","innerRef","renderCard","bgcolor","marginTop","marginLeft","direction","newCard","onAddNewCard","onRemoveLane","Divider","CardHeader","textAlign","droppableId","List","droppableProps","placeholder","Component","HttpCommunication","errorHandler","host","URL","tryLimit","timeBetweenTriesMs","tries","undefined","response","fetch","method","withCredentials","headers","catch","setTimeout","json","data","body","JSON","stringify","NewLaneDialog","onNewLane","setOrder","alignItems","sm","md","lg","height","minHeight","KanbanBoard","compareLaneOrders","state","lanes","isLoading","isError","httpCommunication","setState","getAll","AddNewCard","effectedLane","find","x","laneIdx","indexOf","splice","postCard","then","push","deleteCard","editedCardIdx","editCard","removedLane","removedLaneIdx","forEach","l","deleteLane","renderErrorAlert","Box","justifyContent","CircularProgress","lanesRender","lane","renderLane","newLanes","addedLane","postLane","margintop","onDragEnd","result","destination","items","Array","from","reorderdItem","Number","source","moveCard","themeCustom","createTheme","palette","background","default","main","App","ThemeProvider","theme","CssBaseline","flexGrow","AppBar","position","Toolbar","ReactDOM","render","StrictMode","LocalizationProvider","dateAdapter","document","getElementById"],"mappings":"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","file":"static/js/main.5feb16f1.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function EditNewCardDialog(props) {\r\n    const {\r\n        title: titleProp,\r\n        mode,\r\n        description: descriptionProp,\r\n        deadline: deadlineProp,\r\n        onSaveCard,\r\n    } = props;\r\n\r\n    const editMode = (mode === 'edit');\r\n    const [title, setTitle] = React.useState(\r\n        titleProp,\r\n    );\r\n    const [description, setDescription] = React.useState(\r\n        descriptionProp,\r\n    );\r\n    const [date, setDate] = React.useState(\r\n        new Date(deadlineProp).toLocaleDateString('en-CA'),\r\n    );\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [openSnackBar, setOpenSnackBar] = React.useState(false);\r\n\r\n    const handleChangeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n\r\n    const handleChangeDescription = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    const handleChangeDate = (event) => {\r\n        setDate(event.target.value);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (title && date) {\r\n            onSaveCard({\r\n                title,\r\n                description: description || '',\r\n                deadline: date,\r\n            });\r\n            setOpen(false);\r\n        } else {\r\n            setOpenSnackBar(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackBar = () => {\r\n        setOpenSnackBar(false);\r\n    };\r\n\r\n    const renderButton = () => {\r\n        if (editMode) {\r\n            return (\r\n                <IconButton\r\n                    aria-label=\"edit\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={handleClickOpen}\r\n                >\r\n                    <EditIcon fontSize=\"small\" />\r\n                </IconButton>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClickOpen}\r\n                sx={{ width: 1 }}\r\n                color=\"primary\"\r\n            >\r\n                New Card\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {renderButton()}\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>\r\n                    {editMode ? 'Edit card' : 'Add new card'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {editMode\r\n                            ? 'Edit the card.'\r\n                            : 'Fill out the fields and add to current lane.'}\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        required\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Title\"\r\n                        type=\"title\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onChange={handleChangeTitle}\r\n                        defaultValue={title}\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"description\"\r\n                        label=\"Description\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={3}\r\n                        variant=\"outlined\"\r\n                        onChange={handleChangeDescription}\r\n                        defaultValue={description}\r\n                    />\r\n                    <TextField\r\n                        id=\"date\"\r\n                        label=\"\"\r\n                        type=\"date\"\r\n                        onChange={handleChangeDate}\r\n                        defaultValue={date}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSave} variant=\"outlined\">\r\n                        {editMode ? 'Edit' : 'Add'}\r\n                    </Button>\r\n                </DialogActions>\r\n                <Snackbar\r\n                    open={openSnackBar}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseSnackBar}\r\n                    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\r\n                >\r\n                    <Alert\r\n                        onClose={handleCloseSnackBar}\r\n                        severity=\"error\"\r\n                        sx={{ width: '100%' }}\r\n                    >\r\n                        Title and deadline are required fields.\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nEditNewCardDialog.defaultProps = {\r\n    title: '',\r\n    description: '',\r\n    deadline: new Date().toLocaleDateString('en-CA'),\r\n    mode: 'add',\r\n};\r\n\r\nEditNewCardDialog.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    deadline: PropTypes.string,\r\n    onSaveCard: PropTypes.func.isRequired,\r\n    mode: PropTypes.string,\r\n};\r\n","import { ListItemText } from '@mui/material';\r\nimport React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport PropTypes from 'prop-types';\r\nimport EditNewCardDialog from './EditNewCardDialog';\r\n\r\nexport default function TaskCard(props) {\r\n    const {\r\n        id,\r\n        title,\r\n        description,\r\n        deadline,\r\n        laneId,\r\n        onRemoveCard,\r\n        onEditCard,\r\n    } = props;\r\n\r\n    const deleteCard = () => {\r\n        onRemoveCard(id);\r\n    };\r\n\r\n    const editCard = (cardDetails) => {\r\n        onEditCard({\r\n            title: cardDetails.title,\r\n            description: cardDetails.description,\r\n            deadline: cardDetails.deadline,\r\n            id,\r\n            laneId,\r\n        });\r\n    };\r\n\r\n    const dateFormatOptions = {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n    };\r\n\r\n    return (\r\n        <Card sx={{ width: 1, padding: 1, maxWidth: 1 }}>\r\n            <ListItemText\r\n                primary={\r\n                    (\r\n                        <Grid\r\n                            container\r\n                            spacing={2}\r\n                            sx={{ width: 1 }}\r\n                            style={{\r\n                                whiteSpace: 'pre-wrap',\r\n                                overflowWrap: 'break-word',\r\n                            }}\r\n                        >\r\n                            <Grid item xs={8}>\r\n                                {title}\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <EditNewCardDialog\r\n                                    title={title}\r\n                                    description={description}\r\n                                    deadline={deadline}\r\n                                    onSaveCard={editCard}\r\n                                    mode=\"edit\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <IconButton\r\n                                    aria-label=\"delete\"\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    onClick={deleteCard}\r\n                                >\r\n                                    <DeleteIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )\r\n                }\r\n                secondary={\r\n                    (\r\n                        <>\r\n                            <Typography\r\n                                sx={{ display: 'inline' }}\r\n                                variant=\"body2\"\r\n                                color=\"text.primary\"\r\n                                component=\"span\"\r\n                                style={{ wordWrap: 'break-word' }}\r\n                            >\r\n                                {new Date(deadline).toLocaleDateString(\r\n                                    dateFormatOptions,\r\n                                )}\r\n                            </Typography>\r\n                            <Typography\r\n                                sx={{ display: 'inline', maxWidth: 1 }}\r\n                                variant=\"body2\"\r\n                                component=\"span\"\r\n                                color=\"text.secondary\"\r\n                                style={{ wordWrap: 'break-word' }}\r\n                            >\r\n                                {(description.trim() === '' || description === null) ? '' : ` - ${description}`}\r\n                            </Typography>\r\n                        </>\r\n                    )\r\n                }\r\n            />\r\n        </Card>\r\n    );\r\n}\r\n\r\nTaskCard.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    deadline: PropTypes.string.isRequired,\r\n    laneId: PropTypes.number.isRequired,\r\n    onRemoveCard: PropTypes.func.isRequired,\r\n    onEditCard: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport List from '@mui/material/List';\r\nimport Card from '@mui/material/Card';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { CardHeader, Divider } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport TaskCard from './TaskCard';\r\nimport EditNewCardDialog from './EditNewCardDialog';\r\n\r\nclass KanbanLane extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        Object.assign(this, props);\r\n    }\r\n\r\n    renderCard(i) {\r\n        const onRemoveCard = (deletedCardId) => {\r\n            this.onRemoveCard(this.id, deletedCardId);\r\n        };\r\n\r\n        const onEditCard = (editedCard) => {\r\n            this.onEditCard(this.id, editedCard);\r\n        };\r\n\r\n        return (\r\n            <TaskCard\r\n                id={this.cards[i].id}\r\n                title={this.cards[i].title}\r\n                description={this.cards[i].description}\r\n                laneId={this.cards[i].laneID}\r\n                deadline={this.cards[i].deadline}\r\n                onRemoveCard={onRemoveCard}\r\n                onEditCard={onEditCard}\r\n                oreder={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const compareCardOrders = (a, b) => {\r\n            if (a.order < b.order) return -1;\r\n            if (a.order > b.order) return 1;\r\n            return 0;\r\n        };\r\n\r\n        this.cards.sort(compareCardOrders);\r\n        const cardsRender = this.cards.map((card, index) => (\r\n            <Draggable\r\n                key={card.id}\r\n                draggableId={card.id.toString()}\r\n                index={index}\r\n            >\r\n                {(provided) => (\r\n                    <ListItem\r\n                        alignitems=\"flex-start\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {this.renderCard(index)}\r\n                    </ListItem>\r\n                )}\r\n            </Draggable>\r\n        ));\r\n\r\n        const onAddCard = (newCard) => {\r\n            this.onAddNewCard(this.id, newCard);\r\n        };\r\n\r\n        const onRemoveLane = () => {\r\n            this.onRemoveLane(this.id);\r\n        };\r\n\r\n        return (\r\n            <Card\r\n                sx={{\r\n                    bgcolor: '#9e9e9e',\r\n                    marginTop: 1,\r\n                    marginLeft: 1,\r\n                    maxWidth: 1,\r\n                }}\r\n            >\r\n                <Grid container direction=\"row\" spacing={0.5}>\r\n                    <Grid item xs={8}>\r\n                        <EditNewCardDialog onSaveCard={onAddCard} mode=\"new\" />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ width: 1 }}\r\n                            color=\"error\"\r\n                            onClick={onRemoveLane}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <CardHeader title={this.title} style={{ textAlign: 'center' }} />\r\n                <Divider />\r\n                <Droppable droppableId={this.id.toString()}>\r\n                    {(provided) => (\r\n                        <List\r\n                            alignitems=\"stretch\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {cardsRender}\r\n                            {provided.placeholder}\r\n                        </List>\r\n                    )}\r\n                </Droppable>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KanbanLane;\r\n\r\nKanbanLane.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        description: PropTypes.string.isRequired,\r\n        deadline: PropTypes.string.isRequired,\r\n        laneID: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    onRemoveCard: PropTypes.func.isRequired,\r\n    onEditCard: PropTypes.func.isRequired,\r\n    onAddNewCard: PropTypes.func.isRequired,\r\n    onRemoveLane: PropTypes.func.isRequired,\r\n};\r\n","export default class HttpCommunication {\r\n    host = 'https://localhost:5001';\r\n\r\n    URL = 'https://localhost:5001/api';\r\n\r\n    tryLimit = 5;\r\n\r\n    timeBetweenTriesMs = 500;\r\n\r\n    constructor(errorHandler) {\r\n        this.errorHandler = errorHandler;\r\n    }\r\n\r\n    async getAll() {\r\n        let response;\r\n        let tries = 0;\r\n        while (response === undefined && tries < this.tryLimit) {\r\n            response = await fetch(`${this.URL}/Lanes`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                withCredentials: true,\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': this.host,\r\n                },\r\n            }).catch(() => {\r\n                this.errorHandler();\r\n            });\r\n            tries += 1;\r\n            if (response === undefined) {\r\n                await setTimeout(null, this.timeBetweenTriesMs);\r\n            }\r\n        }\r\n        return (await typeof response) === 'undefined'\r\n            ? response\r\n            : response.json();\r\n    }\r\n\r\n    async postCard(data) {\r\n        const response = await fetch(`${this.URL}/Cards`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }).catch(() => {\r\n            this.errorHandler();\r\n        });\r\n\r\n        return (await typeof response) === 'undefined'\r\n            ? response\r\n            : response.json();\r\n    }\r\n\r\n    editCard(data) {\r\n        fetch(`${this.URL}/Cards/${data.id}/edit`, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }).catch(() => {\r\n            this.errorHandler();\r\n        });\r\n    }\r\n\r\n    moveCard(data) {\r\n        fetch(`${this.URL}/Cards/${data.id}/move`, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }).catch(() => {\r\n            this.errorHandler();\r\n        });\r\n    }\r\n\r\n    deleteCard(id) {\r\n        fetch(`${this.URL}/Cards/${id}`, {\r\n            method: 'DELETE',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n            },\r\n        })\r\n            .catch(() => {\r\n                this.errorHandler();\r\n            });\r\n    }\r\n\r\n    async postLane(data) {\r\n        const response = await fetch(`${this.URL}/Lanes`, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }).catch(() => {\r\n            this.errorHandler();\r\n        });\r\n\r\n        return (await typeof response) === 'undefined'\r\n            ? response\r\n            : response.json();\r\n    }\r\n\r\n    deleteLane(id) {\r\n        fetch(`${this.URL}/Lanes/${id}`, {\r\n            method: 'DELETE',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': this.host,\r\n            },\r\n        })\r\n            .catch(() => {\r\n                this.errorHandler();\r\n            });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Grid from '@mui/material/Grid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function NewLaneDialog(props) {\r\n    const { onNewLane } = props;\r\n\r\n    const [title, setTitle] = React.useState('');\r\n\r\n    const [order, setOrder] = React.useState(1);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [openSnackBar, setOpenSnackBar] = React.useState(false);\r\n\r\n    const handleChangeTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    };\r\n\r\n    const handleChangeOrder = (event) => {\r\n        setOrder(event.target.value);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (title && order) {\r\n            onNewLane({\r\n                title,\r\n                order: order - 1,\r\n            });\r\n            setOpen(false);\r\n        } else {\r\n            setOpenSnackBar(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackBar = () => {\r\n        setOpenSnackBar(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={0}\r\n            item\r\n            alignItems=\"stretch\"\r\n            direction=\"row\"\r\n            xs={12}\r\n            sm={6}\r\n            md={4}\r\n            lg={2}\r\n            sx={{ maxWidth: 1, marginTop: 1 }}\r\n        >\r\n            <Button\r\n                variant=\"outlined\"\r\n                sx={{\r\n                    height: 1, width: 1, minHeight: '50px', maxWidth: 1,\r\n                }}\r\n                onClick={handleClickOpen}\r\n            >\r\n                <AddIcon fontSize=\"large\" />\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Add new lane</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Fill out the fields and add to the board.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        required\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Title\"\r\n                        type=\"title\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onChange={handleChangeTitle}\r\n                        defaultValue={title}\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"order\"\r\n                        label=\"Order\"\r\n                        type=\"number\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        onChange={handleChangeOrder}\r\n                        defaultValue={order}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSave} variant=\"outlined\">\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n                <Snackbar\r\n                    open={openSnackBar}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseSnackBar}\r\n                    anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\r\n                >\r\n                    <Alert\r\n                        onClose={handleCloseSnackBar}\r\n                        severity=\"error\"\r\n                        sx={{ width: '100%' }}\r\n                    >\r\n                        Title and order are required fields.\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Dialog>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nNewLaneDialog.propTypes = {\r\n    onNewLane: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport Grid from '@mui/material/Grid';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\nimport Alert from '@mui/material/Alert';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport KanbanLane from './KanbanLane';\r\nimport HttpCommunication from '../network/HttpCommunication';\r\nimport NewLaneDialog from './NewLaneDialog';\r\n\r\n// 'https://61631df3b55edc00175c19a7.mockapi.io/mock/'\r\n\r\nclass KanbanBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lanes: [],\r\n            isLoading: true,\r\n            isError: false,\r\n        };\r\n\r\n        const errorHandler = () => {\r\n            this.setState({ isError: true });\r\n            this.setState({ isLoading: true });\r\n        };\r\n\r\n        this.httpCommunication = new HttpCommunication(errorHandler);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const data = await this.httpCommunication.getAll();\r\n\r\n        if (await data) {\r\n            await data.sort(this.compareLaneOrders);\r\n            await this.setState({ lanes: data });\r\n            await this.setState({ isLoading: false });\r\n            await this.setState({ isError: false });\r\n        }\r\n    }\r\n\r\n    compareLaneOrders = (a, b) => {\r\n        if (a.order < b.order) return -1;\r\n        if (a.order > b.order) return 1;\r\n        return 0;\r\n    };\r\n\r\n    renderLane(i) {\r\n        const AddNewCard = async (laneId, card) => {\r\n            const newCard = card;\r\n            const { lanes } = this.state;\r\n            const effectedLane = lanes.find((x) => x.id === laneId);\r\n            const laneIdx = lanes.indexOf(effectedLane);\r\n            lanes.splice(laneIdx, 1);\r\n            newCard.laneID = laneId;\r\n            await this.httpCommunication.postCard(card).then((data) => {\r\n                if (data === undefined) return;\r\n                newCard.id = data.id;\r\n            });\r\n\r\n            await effectedLane.cards.push(newCard);\r\n            await lanes.splice(laneIdx, 0, effectedLane);\r\n\r\n            await this.setState({ lanes });\r\n        };\r\n\r\n        const RemoveCard = (laneId, deletedCardId) => {\r\n            const { lanes } = this.state;\r\n            const effectedLane = lanes.find((x) => x.id === laneId);\r\n            const laneIdx = lanes.indexOf(effectedLane);\r\n            lanes.splice(laneIdx, 1);\r\n            effectedLane.cards.splice(\r\n                effectedLane.cards.indexOf(\r\n                    effectedLane.cards.find((x) => x.id === deletedCardId),\r\n                ),\r\n                1,\r\n            );\r\n            lanes.splice(laneIdx, 0, effectedLane);\r\n\r\n            this.setState({ lanes });\r\n            this.httpCommunication.deleteCard(deletedCardId);\r\n        };\r\n\r\n        const EditCard = (laneId, editedCard) => {\r\n            const { lanes } = this.state;\r\n            const effectedLane = lanes.find((x) => x.id === laneId);\r\n            const laneIdx = lanes.indexOf(effectedLane);\r\n            lanes.splice(laneIdx, 1);\r\n            const editedCardIdx = effectedLane.cards.indexOf(\r\n                effectedLane.cards.find((x) => x.id === editedCard.id),\r\n            );\r\n            effectedLane.cards.splice(editedCardIdx, 1);\r\n            effectedLane.cards.splice(editedCardIdx, 0, editedCard);\r\n            lanes.splice(laneIdx, 0, effectedLane);\r\n\r\n            this.setState({ lanes });\r\n            this.httpCommunication.editCard(editedCard);\r\n        };\r\n\r\n        const RemoveLane = (laneId) => {\r\n            const { lanes } = this.state;\r\n            const removedLane = lanes.find((x) => x.id === laneId);\r\n            const removedLaneIdx = lanes.indexOf(removedLane);\r\n            lanes.forEach((l, index) => {\r\n                if (l.order > lanes[removedLaneIdx].order) {\r\n                    lanes[index].order -= 1;\r\n                }\r\n            });\r\n            lanes.splice(removedLaneIdx, 1);\r\n\r\n            this.setState({ lanes });\r\n            // console.log(this.state.lanes)\r\n            this.httpCommunication.deleteLane(laneId);\r\n        };\r\n\r\n        const { lanes } = this.state;\r\n\r\n        const {\r\n            id,\r\n            cards,\r\n            title,\r\n        } = lanes[i];\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                key={id}\r\n                item\r\n                xs={12}\r\n                sm={6}\r\n                md={4}\r\n                lg={2}\r\n                sx={{ maxWidth: 1 }}\r\n            >\r\n                <KanbanLane\r\n                    id={id}\r\n                    cards={cards}\r\n                    title={title}\r\n                    onAddNewCard={AddNewCard}\r\n                    onRemoveCard={RemoveCard}\r\n                    onEditCard={EditCard}\r\n                    onRemoveLane={RemoveLane}\r\n                />\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { isError, isLoading, lanes } = this.state;\r\n\r\n        const renderErrorAlert = () => (\r\n            <Snackbar\r\n                open={isError}\r\n                autoHideDuration={10000}\r\n                anchorOrigin={{ horizontal: 'center', vertical: 'top' }}\r\n            >\r\n                <Alert severity=\"error\" sx={{ width: '100%' }}>\r\n                    There was a problem. Please reload the page.\r\n                </Alert>\r\n            </Snackbar>\r\n        );\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <div>\r\n                    <Box\r\n                        sx={{ display: 'flex' }}\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        style={{ minHeight: '90vh' }}\r\n                    >\r\n                        <CircularProgress size={80} />\r\n                    </Box>\r\n                    {renderErrorAlert()}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const handleOnDragEnd = (result) => {\r\n            if (!result.destination) return;\r\n            const items = Array.from(lanes);\r\n            const reorderdItem = items\r\n                .find((x) => x.id === Number(result.source.droppableId))\r\n                .cards.splice(result.source.index, 1);\r\n            items\r\n                .find((x) => x.id === Number(result.destination.droppableId))\r\n                .cards.splice(result.destination.index, 0, reorderdItem[0]);\r\n\r\n            this.setState(() => (\r\n                { lanes: items }\r\n            ));\r\n\r\n            reorderdItem[0].laneID = Number(result.destination.droppableId);\r\n            reorderdItem[0].order = result.destination.index;\r\n            this.httpCommunication.moveCard(reorderdItem[0]);\r\n        };\r\n\r\n        const lanesRender = lanes.map((lane, index) => (\r\n            this.renderLane(index)\r\n        ));\r\n\r\n        const onNewLane = async (lane) => {\r\n            const addedLane = lane;\r\n            const newLanes = lanes;\r\n            addedLane.cards = [];\r\n            newLanes.forEach((l, index) => {\r\n                if (l.order >= addedLane.order) {\r\n                    newLanes[index].order += 1;\r\n                }\r\n            });\r\n            await this.httpCommunication.postLane(addedLane).then((data) => {\r\n                if (data === undefined) return;\r\n                addedLane.id = data.id;\r\n            });\r\n            await newLanes.splice(addedLane.order, 0, addedLane);\r\n            await newLanes.sort(this.compareLaneOrders);\r\n            await this.setState({ lanes: newLanes });\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    spacing={1}\r\n                    justifyContent=\"left\"\r\n                    alignItems=\"stretch\"\r\n                    sx={{ margintop: 1, height: 1, width: 1 }}\r\n                >\r\n                    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                        {lanesRender}\r\n                    </DragDropContext>\r\n                    <NewLaneDialog onNewLane={onNewLane} />\r\n                </Grid>\r\n                {renderErrorAlert()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KanbanBoard;\r\n","import React from 'react';\nimport '../static/App.css';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport KanbanBoard from './KanbanBoard';\n\nconst themeCustom = createTheme({\n    palette: {\n        background: {\n            default: '#e0e0e0',\n        },\n        primary: {\n            main: '#424242',\n        },\n        secondary: {\n            main: '#616161',\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <ThemeProvider theme={themeCustom}>\n            <CssBaseline />\n            <Box sx={{ flexGrow: 1 }}>\n                <AppBar position=\"static\">\n                    <Toolbar variant=\"dense\">\n                        <Typography\n                            variant=\"h6\"\n                            color=\"inherit\"\n                            component=\"div\"\n                        >\n                            Tasks\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </Box>\n            <KanbanBoard />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport dateAdapter from '@mui/lab/AdapterDateFns';\nimport App from './Components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <LocalizationProvider dateAdapter={dateAdapter}>\n            <App />\n        </LocalizationProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}